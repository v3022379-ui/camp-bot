import os
import sqlite3
import telebot
from telebot import types
import schedule
import time
import threading
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ['8364795745:AAFua_2qWp8jp3jB70I3ZkAMCAB0NWIDFW0']
ADMIN_ID = int(os.environ['1320734792'])
DATABASE_NAME = 'camp_bot.db'

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ø—Å—É–ª—ã –≤—Ä–µ–º–µ–Ω–∏
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            squad INTEGER DEFAULT NULL,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS time_capsules (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            squad INTEGER,
            question_1 TEXT,
            question_2 TEXT,
            question_3 TEXT,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT squad FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        squad = result[0]
        if squad:
            squad_chat_link = get_squad_chat_link(squad)
            bot.send_message(
                message.chat.id,
                f"üéâ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –≤ –û–¢–†–Ø–î–ï ‚Ññ{squad}\n\n"
                f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ —á–∞—Ç –æ—Ç—Ä—è–¥–∞: {squad_chat_link}\n\n"
                f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è —Ä–µ–±—è—Ç–∞–º –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üî•"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç, {full_name}! üëã\n"
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫—É –ø–æ –æ—Ç—Ä—è–¥–∞–º! üé™\n"
                f"–ñ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞."
            )
    else:
        cursor.execute(
            'INSERT INTO users (user_id, username, full_name) VALUES (?, ?, ?)',
            (user_id, username, full_name)
        )
        conn.commit()
        
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {full_name}! üëã\n"
            f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫—É –ø–æ –æ—Ç—Ä—è–¥–∞–º! üé™\n"
            f"–ñ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞."
        )
    
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /getid (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(commands=['getid'])
def get_chat_id(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    chat_id = message.chat.id
    chat_type = message.chat.type
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    bot.reply_to(
        message,
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
        f"‚Ä¢ –¢–∏–ø: {chat_type}\n"
        f"‚Ä¢ ID —á–∞—Ç–∞: `{chat_id}`",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /distribute
@bot.message_handler(commands=['distribute'])
def distribute_squads(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT user_id, full_name FROM users WHERE squad IS NULL')
    users = cursor.fetchall()
    
    if not users:
        bot.reply_to(message, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
        conn.close()
        return
    
    NUM_SQUADS = 6
    for i, (user_id, full_name) in enumerate(users):
        squad_number = (i % NUM_SQUADS) + 1
        cursor.execute(
'UPDATE users SET squad = ? WHERE user_id = ?',
            (squad_number, user_id)
        )
        
        squad_chat_link = get_squad_chat_link(squad_number)
        try:
            bot.send_message(
                user_id,
                f"üéâ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –≤ –û–¢–†–Ø–î–ï ‚Ññ{squad_number}\n\n"
                f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ —á–∞—Ç –æ—Ç—Ä—è–¥–∞: {squad_chat_link}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ {NUM_SQUADS} –æ—Ç—Ä—è–¥–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /morning
@bot.message_handler(commands=['morning'])
def morning_command(message):
    print("üîî –ö–æ–º–∞–Ω–¥–∞ /morning –≤—ã–∑–≤–∞–Ω–∞")
    
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    morning_message = (
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞! ‚òÄÔ∏è –í—Å–µ–º —Å—Ä–æ—á–Ω–æ –Ω–∞ –±–æ—Ä—Ç!\n"
        "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –º–∏—Å—Å–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ç–∏–∫–æ–≤–æ–≥–æ –º–æ–¥—É–ª—èüêæ\n"
        "–ü—Ä–∏–Ω—Ü–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: –≤—Å–µ, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Ç–∏–∫–µ—Ä —Å –∫–æ—Ç–∏–∫–æ–º —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç –º–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –æ–ª–∞–¥—É—à–µ–∫! ü•û‚ú®"
    )
    
    send_to_all_squad_chats(morning_message)
    bot.reply_to(message, "‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –ö–æ–º–∞–Ω–¥–∞ /evening
@bot.message_handler(commands=['evening'])
def evening_command(message):
    print("üîî –ö–æ–º–∞–Ω–¥–∞ /evening –≤—ã–∑–≤–∞–Ω–∞")
    
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    evening_message = (
        "–°—Ç–∞–≤—å—Ç–µ +, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –≤–∞—Å —É–¥–∏–≤–∏–ª–æ/—Ä–∞–∑–≤–µ—Å–µ–ª–∏–ª–æ/–≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ.\n"
        "–ê —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–≤—å—Ç–µ ‚ù§Ô∏è, –µ—Å–ª–∏ –≤—ã –≥–æ—Ä–¥–∏—Ç–µ—Å—å —Ç–µ–º, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ—Ç—Ä—è–¥–∞.\n\n"
        "–î—É–º–∞—é, —É –Ω–∞—Å —Ç—É—Ç —Å–æ–±—Ä–∞–ª–∞—Å—å –∫–æ–º–∞–Ω–¥–∞ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º!"
    )
    
    send_to_all_squad_chats(evening_message)
    bot.reply_to(message, "‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –ö–æ–º–∞–Ω–¥–∞ /stats
@bot.message_handler(commands=['stats'])
def show_stats(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT squad, COUNT(*) FROM users WHERE squad IS NOT NULL GROUP BY squad')
    squad_stats = cursor.fetchall()
    
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Å–µ–≥–æ: {total_users}):\n"
    for squad, count in squad_stats:
        report += f"–û—Ç—Ä—è–¥ {squad}: {count} —á–µ–ª–æ–≤–µ–∫\n"
    
    conn.close()
    bot.reply_to(message, report)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_squad_chat_link(squad_number):
    links = {
        1: "https://t.me/+mcWOgdDVjuIzNDYy",
        2: "https://t.me/+65crPBlnZQVlYTIy", 
        3: "https://t.me/+ZHyKA9ZX1FQ1MjY6",
        4: "https://t.me/+--6MKDxUXIRiNDI6",
        5: "https://t.me/+Jt89U6exSuk2YzYy",
        6: "https://t.me/+LR6BtyXuVo9lNTgy",
    }
    return links.get(squad_number, "–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ")

def get_squad_chat_id(squad_number):
    squad_chats = {
        1: -4764309202,
        2: -4614231470,
        3: -4965369333,
        4: -4961778285,
        5: -4960496927,
        6: -4800228594,
    }
    return squad_chats.get(squad_number)

def send_to_all_squad_chats(message_text):
    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç—ã")
    
    for squad in range(1, 7):
        chat_id = get_squad_chat_id(squad)
        if chat_id:
            try:
                bot.send_message(chat_id, message_text)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—Ä—è–¥ {squad}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—Ä—è–¥–µ {squad}: {e}")
        else:
            print(f"‚ö†Ô∏è –ù–µ—Ç ID –¥–ª—è –æ—Ç—Ä—è–¥–∞ {squad}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    print("üöÄ –ë–æ—Ç –¥–ª—è 6 –æ—Ç—Ä—è–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")

    bot.infinity_polling()
